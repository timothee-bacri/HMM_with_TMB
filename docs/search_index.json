[["application-to-different-data-sets.html", "Chapter 6 Application to different data sets 6.1 TYT dataset 6.2 Simulated dataset", " Chapter 6 Application to different data sets 6.1 TYT dataset Set a seed for randomness, and load files set.seed(123) library(TMB) TMB::compile(&quot;code/poi_hmm.cpp&quot;) ## [1] 0 dyn.load(dynlib(&quot;code/poi_hmm&quot;)) source(&quot;functions/utils.R&quot;) load(&quot;data/tinnitus.RData&quot;) Set initial parameters # Parameters and covariates m &lt;- 2 if (m == 1) { gamma &lt;- matrix(1) } else { gamma &lt;- matrix(0.2 / (m - 1), nrow = m, ncol = m) diag(gamma) &lt;- 0.8 } lambda &lt;- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m) delta &lt;- stat.dist(gamma) Transform them into working parameters working_params &lt;- pois.HMM.pn2pw(m, lambda, gamma) TMB_data &lt;- list(x = tinn_data, m = m) Estimate the parameters via a function # Build the TMB object obj_tmb &lt;- MakeADFun(TMB_data, working_params, DLL = &quot;poi_hmm&quot;, silent = TRUE) # Optimize mod_tmb &lt;- nlminb(start = obj_tmb$par, objective = obj_tmb$fn, gradient = obj_tmb$gr, hessian = obj_tmb$he) # Check convergence mod_tmb$convergence == 0 ## [1] TRUE # Results summary(sdreport(obj_tmb), &quot;report&quot;) ## Estimate Std. Error ## lambda 1.63641100 0.27758296 ## lambda 5.53309576 0.31876147 ## gamma 0.94980209 0.04374676 ## gamma 0.02592204 0.02088688 ## gamma 0.05019791 0.04374676 ## gamma 0.97407796 0.02088688 ## delta 0.34054200 0.23056437 ## delta 0.65945800 0.23056437 6.2 Simulated dataset We detail here the code used to simulate two datasets from 2-states Poisson HMMs, one of size and one of size . Then, using the same procedure as above, we estimate a model using different initial parameters. Set initial parameters (data size and HMM parameters) DATA_SIZE_SIMU &lt;- 2000 m &lt;- 2 # Generate parameters lambda &lt;- seq(10, 14, length.out = m) # Create the transition probability matrix with 0.8 on its diagonal gamma &lt;- matrix(0.2 / (m - 1), nrow = m, ncol = m) diag(gamma) &lt;- 0.8 delta &lt;- stat.dist(gamma) The stat.dist function computes the stationary distribution. Generate data with one of the functions defined in 5.1 simu_data &lt;- pois.HMM.generate_sample(ns = DATA_SIZE_SIMU, mod = list(m = m, lambda = lambda, gamma = gamma, delta = delta))$data Set initial parameters # Parameters and covariates m &lt;- 2 if (m == 1) { gamma &lt;- matrix(1) } else { gamma &lt;- matrix(0.4 / (m - 1), nrow = m, ncol = m) diag(gamma) &lt;- 0.6 } lambda &lt;- seq(quantile(simu_data, 0.1), quantile(simu_data, 0.9), length.out = m) delta &lt;- stat.dist(gamma) # Display Poisson means lambda ## [1] 7 17 Transform them into working parameters working_params &lt;- pois.HMM.pn2pw(m, lambda, gamma) TMB_data &lt;- list(x = simu_data, m = m) Estimate the parameters via a function # Build the TMB object obj_tmb &lt;- MakeADFun(TMB_data, working_params, DLL = &quot;poi_hmm&quot;, silent = TRUE) # Optimize mod_tmb &lt;- nlminb(start = obj_tmb$par, objective = obj_tmb$fn, gradient = obj_tmb$gr, hessian = obj_tmb$he) # Check convergence mod_tmb$convergence == 0 ## [1] TRUE # Results summary(sdreport(obj_tmb), &quot;report&quot;) ## Estimate Std. Error ## lambda 9.7345726 0.23644285 ## lambda 13.8098676 0.22273984 ## gamma 0.8068975 0.03331223 ## gamma 0.1564875 0.02671332 ## gamma 0.1931025 0.03331223 ## gamma 0.8435125 0.02671332 ## delta 0.4476315 0.05201103 ## delta 0.5523685 0.05201103 "]]
