```{r import-files, echo = FALSE, cache = FALSE}
library(knitr)
setwd(dir = "../")
suppressMessages(source("code/main.R"))
knitr::read_chunk('functions/utils.R')
```

# Application to different data sets

## TYT dataset

- Set a seed for randomness, and load files
```{r tyt-init}
set.seed(123)
library(TMB)
TMB::compile("code/poi_hmm.cpp")
dyn.load(dynlib("code/poi_hmm"))
source("functions/utils.R")
load("data/tinnitus.RData")
```

- Set initial parameters
```{r tyt-init-params}
# Parameters and covariates
m <- 2
if (m == 1) {
  gamma <- matrix(1)
} else {
  gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
  diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
```

- Transform them into working parameters
```{r tyt-pn2pw}
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
```

- Estimate the parameters via a function
```{r tyt-estim}
# Build the TMB object
obj_tmb <- MakeADFun(TMB_data, working_params,
                     DLL = "poi_hmm", silent = TRUE)

# Optimize
mod_tmb <- nlminb(start = obj_tmb$par,
                  objective = obj_tmb$fn,
                  gradient = obj_tmb$gr,
                  hessian = obj_tmb$he)

# Check convergence
mod_tmb$convergence == 0

# Results
summary(sdreport(obj_tmb), "report")
```

## Simulated dataset

We detail here the code used to simulate two datasets from 2-states Poisson HMMs, one of size \Sexpr{DATA_SIZE_SIMU[1]} and one of size \Sexpr{DATA_SIZE_SIMU[2]}.
Then, using the same procedure as above, we estimate a model using different initial parameters.

- Set initial parameters (data size and HMM parameters)
```{r simu-gen-init-params}
DATA_SIZE_SIMU <- 2000
m <- 2
# Generate parameters
lambda <- seq(10, 14, length.out = m)
# Create the transition probability matrix with 0.8 on its diagonal
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
delta <- stat.dist(gamma)
```
The `stat.dist` function computes the stationary distribution.

- Generate data with one of the functions defined in \@ref(generating-data)
```{r simu-gen-data}
simu_data <- pois.HMM.generate_sample(ns = DATA_SIZE_SIMU,
                                      mod = list(m = m,
                                                 lambda = lambda,
                                                 gamma = gamma,
                                                 delta = delta))$data
```

- Set initial parameters
```{r simu-init-params}
# Parameters and covariates
m <- 2
if (m == 1) {
  gamma <- matrix(1)
} else {
  gamma <- matrix(0.4 / (m - 1), nrow = m, ncol = m)
  diag(gamma) <- 0.6
}
lambda <- seq(quantile(simu_data, 0.1), quantile(simu_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Display Poisson means
lambda
```

- Transform them into working parameters
```{r simu-pn2pw}
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = simu_data, m = m)
```

- Estimate the parameters via a function
```{r simu-estim}
# Build the TMB object
obj_tmb <- MakeADFun(TMB_data, working_params,
                     DLL = "poi_hmm", silent = TRUE)

# Optimize
mod_tmb <- nlminb(start = obj_tmb$par,
                  objective = obj_tmb$fn,
                  gradient = obj_tmb$gr,
                  hessian = obj_tmb$he)

# Check convergence
mod_tmb$convergence == 0

# Results
summary(sdreport(obj_tmb), "report")
```

