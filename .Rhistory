paste0(rep("$\\delta_{", m), 1:m, "}$"))
row.names(estimates_df) <- row_names_latex
names(estimates_df) <- c("\\textit{${DM}$}",
"\\textit{${TMB}$}",
"\\textit{${TMB_G}$}",
"\\textit{${TMB_H}$}",
"\\textit{${TMB_{GH}}$}")
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-estimates")
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
knitr::knit2pdf("paper.rnw")
estimates_df
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
estimates_df
tmb_gh$mllk
tmb$mllk
print(tmb$mllk, digits=10)
print(tmb_gh$mllk, digits=10)
print(tmb_gh$mllk, digits=20)
print(tmb$mllk, digits=20)
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
row_names_latex <- paste0(rep("$\\lambda_{", m), 1:m, "}$")
for (gamma_idx in 1:m ^ 2) {
row_col_idx <- matrix.col.idx.to.rowcol(gamma_idx, m)
row_names_latex <- c(row_names_latex,
paste0("$\\gamma_{", toString(row_col_idx), "}$"))
}
row_names_latex <- c(row_names_latex,
paste0(rep("$\\delta_{", m), 1:m, "}$"))
row.names(estimates_df) <- row_names_latex
names(estimates_df)
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
row_names_latex <- paste0(rep("$\\lambda_{", m), 1:m, "}$")
for (gamma_idx in 1:m ^ 2) {
row_col_idx <- matrix.col.idx.to.rowcol(gamma_idx, m)
row_names_latex <- c(row_names_latex,
paste0("$\\gamma_{", toString(row_col_idx), "}$"))
}
row_names_latex <- c(row_names_latex,
paste0(rep("$\\delta_{", m), 1:m, "}$"))
row.names(estimates_df) <- row_names_latex
col.names(estimates_df)
colnames(estimates_df)
names(estimates_df)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = 5)
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = 3)
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
estimates_df
var(estimates_df[1,])
estimates_df[1,]
as.numeric(estimates_df[1,])
var(as.numeric(estimates_df[1,]))
var(as.numeric(estimates_df[2,]))
var(as.numeric(estimates_df[3,]))
var(as.numeric(estimates_df[4,]))
sd(as.numeric(estimates_df[1,]))
sapply(as.numeric(estimates_df[1,]), FUN = sd)
apply(X = as.numeric(estimates_df[1,]), MARGIN = 1, FUN = sd)
apply(X = estimates_df, MARGIN = 1, FUN = sd)
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
apply(X = estimates_df, MARGIN = 1, FUN = sd)
apply(X = estimates_df, MARGIN = 2, FUN = sd)
estimates_df
apply(X = estimates_df, MARGIN = 1, FUN = sd)
knitr::knit2pdf("paper.rnw")
knitr::knit2pdf("paper.rnw")
knitr::knit2pdf("paper.rnw")
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric(),
"Std.Dev" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
estimates_df
apply(X = estimates_df, MARGIN = 1, FUN = sd)
apply(X = estimates_df[,-6], MARGIN = 1, FUN = sd)
apply(X = estimates_df, MARGIN = 1, FUN = sd, na.rm = TRUE)
knitr::knit2pdf("paper.rnw")
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric(),
"Std.Dev" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
apply(X = estimates_df, MARGIN = 1, FUN = sd, na.rm = TRUE)
1:(m + m ^ 2 + m)
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
estimates_df
estimates_df[1:(m + m ^ 2 + m), "Std.Dev"]
estimates_df[1:(m + m ^ 2 + m), "Std.Dev"] <- apply(X = estimates_df, MARGIN = 1, FUN = sd, na.rm = TRUE)
estimates_df
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = -3)
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(3,3,3,3,3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(1,3,3,3,3,3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(10,3,3,3,3,3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(1,3,3,3,3,3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(1,-3,-3,-3,-3,-3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
knitr::knit2pdf("paper.rnw")
estimates_df
idx <- 1
# Parameters and covariates
m <- M_LIST_TINN[idx]
if (m == 1) {
gamma <- matrix(1)
} else {
gamma <- matrix(0.2 / (m - 1), nrow = m, ncol = m)
diag(gamma) <- 0.8
}
lambda <- seq(quantile(tinn_data, 0.1), quantile(tinn_data, 0.9), length.out = m)
delta <- stat.dist(gamma)
# Parameters & covariates for TMB
working_params <- pois.HMM.pn2pw(m, lambda, gamma)
TMB_data <- list(x = tinn_data, m = m)
obj <- MakeADFun(TMB_data, working_params, DLL = "poi_hmm", silent = TRUE)
# Estimation
dm <- DM.estimate(x = tinn_data,
m = m,
lambda0 = lambda,
gamma0 = gamma)
tmb <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj)
tmb_g <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE)
tmb_h <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
hessian = TRUE)
tmb_gh <- TMB.estimate(TMB_data = TMB_data,
parameters = working_params,
MakeADFun_obj = obj,
gradient = TRUE,
hessian = TRUE)
# Table
estimates_df <- data.frame("DM" = numeric(),
"TMB" = numeric(),
"TMB_G" = numeric(),
"TMB_H" = numeric(),
"TMB_GH" = numeric(),
"Std.Dev" = numeric())
estimates_df[1:(m + m ^ 2 + m), "DM"] <- c(dm$lambda, as.numeric(dm$gamma), dm$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB"] <- c(tmb$lambda, as.numeric(tmb$gamma), tmb$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_G"] <- c(tmb_g$lambda, as.numeric(tmb_g$gamma), tmb_g$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_H"] <- c(tmb_h$lambda, as.numeric(tmb_h$gamma), tmb_h$delta)
estimates_df[1:(m + m ^ 2 + m), "TMB_GH"] <- c(tmb_gh$lambda, as.numeric(tmb_gh$gamma), tmb_gh$delta)
estimates_df[1:(m + m ^ 2 + m), "Std.Dev"] <- apply(X = estimates_df[,-6], MARGIN = 1, FUN = sd)
row_names_latex <- paste0(rep("$\\lambda_{", m), 1:m, "}$")
for (gamma_idx in 1:m ^ 2) {
row_col_idx <- matrix.col.idx.to.rowcol(gamma_idx, m)
row_names_latex <- c(row_names_latex,
paste0("$\\gamma_{", toString(row_col_idx), "}$"))
}
row_names_latex <- c(row_names_latex,
paste0(rep("$\\delta_{", m), 1:m, "}$"))
row.names(estimates_df) <- row_names_latex
names(estimates_df) <- c("\\textit{${DM}$}",
"\\textit{${TMB}$}",
"\\textit{${TMB_G}$}",
"\\textit{${TMB_H}$}",
"\\textit{${TMB_{GH}}$}",
"Std.Dev")
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(1,3,3,3,3,3,-3))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
table <- xtable(estimates_df,
caption = "Estimates of 2 state Poisson HMM with and without using TMB, estimated on the tinnitus dataset.",
label = "table:2-state-tinn-estimates",
digits = c(1,3,3,3,3,-3,10))
print(table,
sanitize.rownames.function = identity,
sanitize.colnames.function = identity)
knitr::knit2pdf("paper.rnw")
knitr::knit2pdf("paper.rnw")
knitr::knit2pdf("paper.rnw")
