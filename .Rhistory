print(obj_linreg$report())
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Objects returned by REPORT() in C++
obj_linreg$report()
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.5
tsigma <- 1 / (1 + exp(- sigma))
data <- list(y = rnorm(20, sd = tsigma) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_extended",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.5
tsigma <- 1 / (1 + exp(- sigma))
data <- list(y = rnorm(20, sd = tsigma) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_extended",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
# obj_linreg$gr,
# obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# TMB:::setupRStudio()
y <- seq(-0.99, 0.99, by = 0.05)
x <- log(x / (1 - x))
# TMB:::setupRStudio()
y <- seq(-0.99, 0.99, by = 0.05)
x <- log(y / (1 - y))
plot(y, x)
# TMB:::setupRStudio()
y <- seq(-0.999, 0.999, by = 0.05)
x <- log(y / (1 - y))
plot(y, x)
# TMB:::setupRStudio()
y <- seq(-0.999, 0.999, by = 0.05)
x <- log(y / (1 - y))
plot(y, x)
x <- seq(-20, 20)
y <- 1 / (1 + e^(-x))
# TMB:::setupRStudio()
y <- seq(-0.999, 0.999, by = 0.05)
x <- log(y / (1 - y))
plot(y, x)
x <- seq(-20, 20)
y <- 1 / (1 + exp(-x))
plot(x, y)
tsigma
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.5
tsigma <- 1 / (1 + exp(- sigma))
data <- list(y = rnorm(20, sd = tsigma) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0.2)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_extended",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
# obj_linreg$gr,
# obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
sigma <- 0.5
tsigma <- log(sigma / (1 - sigma))
tsigma
sigma <- 0.8
tsigma <- log(sigma / (1 - sigma))
tsigma
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
TMB::compile("code/linreg_extended.cpp")
TMB:::setupRStudio()
TMB:::setupRStudio()
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
dyn.unload(dynlib("code/linreg_minimal"))
dyn.unload(dynlib("code/linreg_minimal"))
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
dyn.unload(dynlib("code/linreg_minimal"))
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
dyn.unload(dynlib("code/linreg_minimal"))
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_minimal.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
dyn.unload(dynlib("code/linreg_minimal"))
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
dyn.unload()
dyn.unload(dynlib("code/linreg_minimal"))
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_minimal"))
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_minimal",
silent = TRUE)
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_extended",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
dyn.unload(dynlib("code/linreg_minimal"))
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg_extended.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg_extended"))
# Generate the data for our test sample
set.seed(123)
sigma <- 0.6
data <- list(y = rnorm(20, sd = sigma) + 1:20, x = 1:20)
tsigma <- log(sigma / (1 - sigma)) # Logit transform
parameters <- list(a = 0, b = 0, tsigma = 0.1)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg_extended",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
# Objects returned by ADREPORT() in C++
summary(sdreport(obj_linreg), select = "report")
# Object
obj_linreg$report()
dyn.unload(dynlib("code/linreg_extended"))
dyn.unload(dynlib("code/linreg_extended"))
library(TMB)
set.seed(123)
library(TMB)
TMB::compile("code/poi_hmm.cpp")
dyn.load(dynlib("code/poi_hmm"))
source("functions/utils.R")
m <- 2
load("data/tinnitus.RData")
TMB_data <- list(x = tinn_data, m = m)
# Initial set of parameters
lambda_init <- c(1, 3)
gamma_init <- matrix(c(0.8, 0.2,
0.2, 0.8), byrow = TRUE, nrow = m)
# Turn them into working parameters
parameters <- pois.HMM.pn2pw(m, lambda_init, gamma_init)
# Build the TMB object
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
# Optimize
mod_tmb <- nlminb(start = obj_tmb$par,
objective = obj_tmb$fn,
gradient = obj_tmb$gr,
hessian = obj_tmb$he)
# Bootstrap procedure
bootstrap_estimates <- data.frame()
DATA_SIZE <- length(tinn_data)
# Set how many parametric bootstrap samples we create
BOOTSTRAP_SAMPLES <- 10
obj_tmb$env$last.par.best
obj_tmb$par
mod_tmb$par
parameters
obj_tmb$report(parameters)
obj_tmb$report(obj_tmb$env$last.par.best)
obj_tmb$report(obj_tmb$par)
obj_tmb$report(obj_tmb$env$last.par.best)
obj_tmb$report(obj_tmb$env$last.par.best)$lambda
obj_tmb$report(obj_tmb$par)$lambda
obj_tmb$report(mod_temp$par)$lambda
obj_tmb$report(mod_tmb$par)$lambda
load("data/results_lamb.RData")
method_comparison_df_lamb
str(conf_int_lamb)
bookdown::render_book("index.Rmd")
library(knitr)
suppressMessages(source("code/packages.R"))
knitr::read_chunk('functions/utils.R')
source('code/setup_parameters.R')
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
mod_linreg$par
dyn.unload(dynlib("code/linreg"))
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
2.8*60
(2.8+8.3+3.2)*60 + 5.7*24*60
2.8+8.3+3.2 + 5.7*24
0.1*60
151%/%24
24*6
6*24 + 7 + 0.1
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
citation("foreach")
citation("foreach")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
load("data/fetal-lamb.RData")
load("data/fetal-lamb.RData")
str(lamb)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
ls()
clear
library(TMB)
load("data/results_tinn.RData")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
