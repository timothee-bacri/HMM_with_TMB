objective = obj_tmb$fn,
gradient = obj_tmb$gr,
hessian = obj_tmb$he)
# Bootstrap procedure
bootstrap_estimates <- data.frame()
DATA_SIZE <- length(tinn_data)
# Set how many parametric bootstrap samples we create
BOOTSTRAP_SAMPLES <- 10
obj_tmb$env$last.par.best
obj_tmb$par
mod_tmb$par
parameters
obj_tmb$report(parameters)
obj_tmb$report(obj_tmb$env$last.par.best)
obj_tmb$report(obj_tmb$par)
obj_tmb$report(obj_tmb$env$last.par.best)
obj_tmb$report(obj_tmb$env$last.par.best)$lambda
obj_tmb$report(obj_tmb$par)$lambda
obj_tmb$report(mod_temp$par)$lambda
obj_tmb$report(mod_tmb$par)$lambda
load("data/results_lamb.RData")
method_comparison_df_lamb
str(conf_int_lamb)
bookdown::render_book("index.Rmd")
library(knitr)
suppressMessages(source("code/packages.R"))
knitr::read_chunk('functions/utils.R')
source('code/setup_parameters.R')
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn,
obj_linreg$gr,
obj_linreg$he)
mod_linreg$par
dyn.unload(dynlib("code/linreg"))
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
2.8*60
(2.8+8.3+3.2)*60 + 5.7*24*60
2.8+8.3+3.2 + 5.7*24
0.1*60
151%/%24
24*6
6*24 + 7 + 0.1
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
citation("foreach")
citation("foreach")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
load("data/fetal-lamb.RData")
load("data/fetal-lamb.RData")
str(lamb)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
ls()
clear
library(TMB)
load("data/results_tinn.RData")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
unlink('README_cache', recursive = TRUE)
github_document()
library(markdown)
github_document()
suppressMessages(source("code/packages.R"))
library(rmarkdown)
github_document()
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
"+"(1,2)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
plot(tinn_data, ylab = "Arousal", xlab = "Day (#)")
load("data/tinnitus.RData")
plot(tinn_data, ylab = "Arousal", xlab = "Day (#)")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# AIC and BIC for a Poisson distribution
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb
AIC
BIC
mod_tmb$convergence == 0
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 1
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 1
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
mod_tmb
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
mod_tmb
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 1
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
mod_tmb
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
mod_tmb
AIC
BIC
# AIC and BIC for dour-state HMM
m <- 4
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
AIC
BIC
# AIC and BIC for dour-state HMM
m <- 4
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC
BIC
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC1 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC1 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC1
BIC1
# AIC and BIC for two-state HMM
m <- 2
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC2 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC2 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC2
BIC2
# AIC and BIC for dour-state HMM
m <- 4
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC4 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC4 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC4
BIC4
# AIC and BIC for dour-state HMM
m <- 4
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC4 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC4 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC4
BIC4
# AIC and BIC for three-state HMM
m <- 3
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma_init) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC3 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC3 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC3
BIC3
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
m <- 2
TMB_data <- list(x = tinn_data, m = m)
lambda <- seq(from = 1, to = 3, length.out = m)
# 0.8 on the diagonal, and 0.2 split along the rest of each line, size m
gamma <- matrix(0.2 / (m - 1),
nrow = m,
ncol = m)
diag(gamma) <- 0.8
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC2 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC2 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
AIC2
BIC2
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
m <- 1
TMB_data <- list(x = tinn_data, m = m)
lambda <- 2
gamma <- 1
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn)
mllk <- mod_tmb$objective
np <- length(unlist(parameters))
AIC_1 <- 2 * (mllk + np)
n <- sum(!is.na(TMB_data$x))
BIC_1 <- 2 * mllk + np * log(n)
mod_tmb$convergence == 0
paste("AIC is", AIC_1, "and BIC is", BIC_1)
BIC_1
BIC_1
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
dnorm(x = 1)
dpois(x = 1, lambda = 5) # Poisson
dnorm(x = 1, mean = 0, sd = 1) # Normal
bookdown::render_book("index.Rmd")
