# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
getwd()
source("../code/main.R")
getwd()
# source("../code/main.R")
# read_chunk('../functions/utils.R')
getwd()
source("../code/main.R")
library(knitr)
setwd(dir = "../")
source("code/main.R")
read_chunk('functions/utils.R')
setwd(dir = "Data supplements")
getwd()
library(knitr)
getwd()
setwd(dir = "../")
source("code/main.R")
read_chunk('functions/utils.R')
setwd(dir = "Data supplements")
getwd()
library(knitr)
getwd()
setwd(dir = "../")
source("code/main.R")
read_chunk('functions/utils.R')
# setwd(dir = "Data supplements")
# getwd()
library(knitr)
setwd(dir = "../")
source("code/main.R")
read_chunk('functions/utils.R')
library(knitr)
setwd(dir = "../")
source("code/main.R")
read_chunk('functions/utils.R')
ls()
# Loading TMB package
library(TMB)
getwd()
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
# Loading TMB package
library(TMB)
getwd()
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
sdreport(obj_linreg, par.fixed = mod_linreg$par)
sdreport(obj_linreg, par.fixed = mod_linreg$par)
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
sdreport(obj_linreg, par.fixed = mod_linreg$par)
summary(sdreport(obj_linreg, par.fixed = mod_linreg$par),
select = "report")
sdreport(obj_linreg, par.fixed = mod_linreg$par)
summary(sdreport(obj_linreg, par.fixed = mod_linreg$par))
load("../data/tinnitus.RData")
load("../data/tinnitus.RData")
knitr::kable(
tinn_data,
caption = 'Tinnitus data',
booktabs = TRUE
)
knitr::kable(
tinn_data,
caption = 'Tinnitus data'
)
knitr::kable(
tinn_data,
caption = 'Tinnitus data',
format = "pipe",
booktabs = TRUE
)
knitr::kable(
tinn_data,
caption = 'Tinnitus data',
format = "latex",
booktabs = TRUE
)
knitr::kable(
tinn_data,
caption = 'Tinnitus data',
format = "latex",
booktabs = TRUE
)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
align = "lp{15cm}",
caption = "Tinnitus data",
label = "table:tinnitus_data")
library(xtable)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
align = "lp{15cm}",
caption = "Tinnitus data",
label = "table:tinnitus_data")
print(temp, include.rownames = FALSE, include.colnames = FALSE,
hline.after = c(0, nrow(temp)))
)
library(xtable)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
align = "lp{15cm}",
caption = "Tinnitus data",
label = "table:tinnitus_data")
print(temp, include.rownames = FALSE, include.colnames = FALSE,
hline.after = c(0, nrow(temp)))
library(xtable)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
align = "lp{15cm}",
caption = "Tinnitus data",
label = "table:tinnitus_data")
print(temp, include.rownames = FALSE, include.colnames = FALSE,
hline.after = c(0, nrow(temp)),
type = "html")
library(xtable)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
# align = "lp{15cm}",
caption = "Tinnitus data",
label = "table:tinnitus_data")
print(temp, include.rownames = FALSE, include.colnames = FALSE,
hline.after = c(0, nrow(temp)),
type = "html")
knitr::kable(
tinn_data,
caption = 'Tinnitus',
booktabs = TRUE
)
t(tinn_data)
knitr::kable(
t(tinn_data),
caption = 'Tinnitus data',
booktabs = TRUE
)
install.packages("kableExtra")
library(kableExtra)
install.packages("pander")
# library(kableExtra)
library(pander)
pander(tinn_data)
library(TMB)
library(optimr)
# Run the C++ file containing the TMB code
TMB::compile("../code/poi_hmm.cpp")
# Load it
dyn.load(dynlib("../code/poi_hmm"))
# Load the parameter transformation function
source("../functions/utils.R")
load("../data/tinnitus.RData")
library(xtable)
temp <- paste(tinn_data, collapse = " ")
temp <- as.data.frame(temp)
temp <- xtable(temp,
# align = "lp{15cm}",
caption = "Tinnitus data")
# label = "table:tinnitus_data")
print(temp, include.rownames = FALSE, include.colnames = FALSE,
# hline.after = c(0, nrow(temp)),
type = "html",
html.table.attributes=list("border='0' cellpadding='5' "))
# Model with 2 states
m <- 2
TMB_data <- list(x = lamb_data, m = m)
tinn_data
summary(tinn_data)
# Model with 2 states
m <- 2
TMB_data <- list(x = tinn_data, m = m)
# Initial set of parameters
lambda <- c(1, 3)
gamma <- matrix(c(0.8, 0.2,
0.2, 0.8), byrow = TRUE, nrow = m)
# Turn them into working parameters
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
# Build the TMB object
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
# Optimize
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn,
gradient = obj_tmb$gr,
hessian = obj_tmb$he)
mod_tmb
# Model with 2 states
m <- 2
TMB_data <- list(x = tinn_data, m = m)
# Initial set of parameters
lambda <- c(1, 3)
gamma <- matrix(c(0.8, 0.2,
0.2, 0.8), byrow = TRUE, nrow = m)
# Turn them into working parameters
parameters <- pois.HMM.pn2pw(m, lambda, gamma)
# Build the TMB object
obj_tmb <- MakeADFun(TMB_data, parameters,
DLL = "poi_hmm", silent = TRUE)
# Optimize
mod_tmb <- nlminb(start = obj_tmb$par, objective = obj_tmb$fn,
gradient = obj_tmb$gr,
hessian = obj_tmb$he)
# Check convergence
mod_tmb$convergence == 0
# Results
summary(sdreport(obj_tmb, par.fixed = mod_tmb$par), "report")
install.packages("readr")
read_file("code/poi_hmm.cpp")
library(readr)
read_file("code/poi_hmm.cpp")
readLines("code/poi_hmm.cpp")
paste(readLines("code/poi_hmm.cpp"))
paste(readLines("code/poi_hmm.cpp"), collapse = " ")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("../code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("../code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
sdreport(obj_linreg, par.fixed = mod_linreg$par)
sdreport(obj_linreg)
mod_linreg$par
sdreport(obj_linreg, par.fixed = mod_linreg$par+1)
summary(sdreport(obj_linreg), select = "report")
summary(sdreport(obj_linreg), select = "report")
load("data/tinnitus.RData")
save(tinn_data, file = "data/tinn.txt")
save(tinn_data, file = "data/tinn.txt",
ascii = TRUE)
readr::write_lines(x = tinn_data, file = "data/tinn.txt")
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
# Loading TMB package
library(TMB)
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
# Dynamic loading of the compiled cpp file
dyn.load(dynlib("code/linreg"))
# Generate the data for our test sample
set.seed(123)
data <- list(y = rnorm(20) + 1:20, x = 1:20)
parameters <- list(a = 0, b = 0, tsigma = 0)
# Instruct TMB to create the likelihood function
obj_linreg <- MakeADFun(data, parameters, DLL = "linreg",
silent = TRUE)
# Optimization of the objective function with nlminb
mod_linreg <- nlminb(obj_linreg$par, obj_linreg$fn)
mod_linreg$par
# Compilation. The compiler returns 0 if the compilation of
# the cpp file was successful
TMB::compile("code/linreg.cpp")
sink()
sink(NULL)
nullfile()
sink(nullfile())
sink()
sink(1)
source("code/main.R")
library(knitr)
# options(warn = - 1)
setwd(dir = "../")
library(knitr)
# options(warn = - 1)
setwd(dir = "../")
sink("1")
source("code/main.R")
knitr::read_chunk('functions/utils.R')
sink()
getOption("verbose")
library(knitr)
setwd(dir = "../")
suppressMessages(source("code/main.R"))
knitr::read_chunk('functions/utils.R')
